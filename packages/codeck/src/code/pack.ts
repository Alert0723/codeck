import JSZip from 'jszip';
import { uniq, zipObject } from 'lodash-es';
import { CodeImportPrepare, CodePrepare } from '../store/node';

export async function packRepo(options: {
  repoName?: string;
  code: string;
  prepares: CodePrepare[];
}): Promise<Blob> {
  const { repoName = 'repo', code, prepares } = options;

  const zip = new JSZip();
  const repo = zip.folder(repoName);
  if (!repo) {
    throw new Error('Zip folder create error');
  }
  const dependencies = await getAllDependencies(prepares);

  repo.file(
    'README.md',
    `## ${repoName}\n\nGenerate by [codeck](https://codeck.moonrailgun.com/)`
  );
  repo.file('index.js', code);
  repo.file(
    'package.json',
    JSON.stringify({
      name: repoName,
      private: true,
      version: '1.0.0',
      description: 'Generated by codeck',
      main: 'index.js',
      scripts: {
        start: 'node index.js',
      },
      keywords: ['codeck'],
      dependencies,
    })
  );

  const content = zip.generateAsync({ type: 'blob' });

  return content;
}

async function getAllDependencies(
  prepares: CodePrepare[]
): Promise<Record<string, string>> {
  const modules = uniq(
    prepares
      .filter((p): p is CodeImportPrepare => p.type === 'import')
      .map((p) => p.module)
  );

  const versions = await Promise.all(
    modules.map((module) => fetchModuleLatestVersion(module))
  );

  return zipObject(modules, versions);
}

/**
 * 获取npm包最新版本号
 */
async function fetchModuleLatestVersion(packageName: string) {
  const res = await fetch(`https://registry.npmjs.org/${packageName}/latest`);
  const json = await res.json();

  return json.version || '*';
}
